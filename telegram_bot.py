from telegram import Update, ReplyKeyboardMarkup, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode
from core import get_best_answer, normalize_text
from quiz import get_quiz_question
import asyncio
import time
import os

TOKEN = os.getenv("BOT_TOKEN")
IMAGE_DIR = "images"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_only_keyboard = ReplyKeyboardMarkup([['‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç']], resize_keyboard=True)
start_keyboard = ReplyKeyboardMarkup([['–ü—Ä–æ—Å—Ç–æ–π', '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π']], resize_keyboard=True)
mode_keyboard = ReplyKeyboardMarkup([['–ü—Ä–æ—Å—Ç–æ–π', '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π']], resize_keyboard=True)

terms_keyboard_simple = ReplyKeyboardMarkup(
    [['–º–∞—Ä–∂–∞', '–ø–ª–µ—á–æ'], ['–∏–º–±–∞–ª–∞–Ω—Å', '–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'], ['–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', '—Å–≤–æ–ø'], ['–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', '/help']],
    resize_keyboard=True
)

terms_keyboard_detailed = ReplyKeyboardMarkup(
    [['–º–∞—Ä–∂–∞', '–ø–ª–µ—á–æ'], ['–∏–º–±–∞–ª–∞–Ω—Å', '–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'], ['–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', '—Å–≤–æ–ø'], ['quiz', 'train'], ['–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', '/help']],
    resize_keyboard=True
)

user_last_message_time = {}

def find_image_file(query: str):
    fname = query.replace(" ", "_") + ".png"
    path = os.path.join(IMAGE_DIR, fname)
    if os.path.exists(path):
        return path
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["started"] = False
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=start_only_keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "–í –ø—Ä–æ—Å—Ç–æ–º —Ä–µ–∂–∏–º–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã.\n"
        "–í —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: quiz –∏ train.\n"
        "–í —Ä–µ–∂–∏–º–µ train –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π '–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞'."
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = time.time()
    if now - user_last_message_time.get(user_id, 0) < 1:
        await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return
    user_last_message_time[user_id] = now

    raw = update.message.text.strip()
    low = raw.lower()

    if not context.user_data.get("started"):
        if low == "‚ñ∂Ô∏è —Å—Ç–∞—Ä—Ç":
            context.user_data["started"] = True
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=mode_keyboard)
        else:
            await update.message.reply_text("üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=start_only_keyboard)
        return

    if context.user_data.get("in_train_mode"):
        if low == "–≤—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞":
            context.user_data["in_train_mode"] = False
            context.user_data.pop("correct", None)
            context.user_data.pop("explanation", None)
            context.user_data.pop("answered", None)
            await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", reply_markup=terms_keyboard_detailed)
            return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    if low == "—Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º":
        context.user_data.clear()
        context.user_data["started"] = True
        await update.message.reply_text("–†–µ–∂–∏–º —Å–±—Ä–æ—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=mode_keyboard)
        return
    if low == "–ø—Ä–æ—Å—Ç–æ–π":
        context.user_data["detailed"] = False
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º.", reply_markup=terms_keyboard_simple)
        return
    if low == "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π":
        context.user_data["detailed"] = True
        await update.message.reply_text("‚úÖ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º.", reply_markup=terms_keyboard_detailed)
        return
    if "detailed" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º.", reply_markup=start_keyboard)
        return

    if context.user_data.get("detailed") and low in ["quiz", "train"]:
        if low == "quiz":
            await handle_quiz(update, context)
        elif low == "train":
            await handle_train(update, context)
        return

    query = normalize_text(raw)
    detailed = context.user_data["detailed"]
    answer, source = get_best_answer(query, detailed=detailed)
    response = f"üìò <b>–û—Ç–≤–µ—Ç:</b>\n{answer}\n\n<i>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>"
    await update.message.reply_text(response, parse_mode=ParseMode.HTML)

    if detailed:
        img_path = find_image_file(query)
        if img_path:
            try:
                with open(img_path, "rb") as f:
                    await update.message.reply_photo(photo=InputFile(f))
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", e)

async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question_data = get_quiz_question()
    question = question_data["definition"]
    options = question_data["options"]
    correct_key = question_data["correct"]
    explanation = question_data.get("explanation", "")

    context.user_data["correct"] = correct_key
    context.user_data["explanation"] = explanation
    context.user_data["answered"] = False

    keyboard = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in options]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"üß† –£–≥–∞–¥–∞–π —Ç–µ—Ä–º–∏–Ω:\n\n{question}", reply_markup=reply_markup)

    async def quiz_timeout():
        await asyncio.sleep(10)
        if not context.user_data.get("answered"):
            await update.message.reply_text(
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_key}</b>\n\nüí° {explanation}",
                parse_mode=ParseMode.HTML
            )
            context.user_data["answered"] = True

    context.user_data["quiz_task"] = asyncio.create_task(quiz_timeout())

async def handle_train(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["in_train_mode"] = True

    train_exit_keyboard = ReplyKeyboardMarkup([["–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞"]], resize_keyboard=True)

    chat_id = update.effective_chat.id

    await context.bot.send_message(
        chat_id=chat_id,
        text="üéØ –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞'.",
        reply_markup=train_exit_keyboard
    )

    question_data = get_quiz_question()
    question = question_data["definition"]
    options = question_data["options"]
    correct_key = question_data["correct"]
    explanation = question_data.get("explanation", "")

    context.user_data["correct"] = correct_key
    context.user_data["explanation"] = explanation
    context.user_data["answered"] = False

    keyboard = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in options]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üß† –£–≥–∞–¥–∞–π —Ç–µ—Ä–º–∏–Ω:\n\n{question}",
        reply_markup=reply_markup
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.callback_query.data
    correct = context.user_data.get("correct")
    explanation = context.user_data.get("explanation", "")
    context.user_data["answered"] = True

    quiz_task = context.user_data.get("quiz_task")
    if quiz_task and not quiz_task.done():
        quiz_task.cancel()

    if answer == correct:
        text = f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ <b>{correct}</b>.\n\nüí° {explanation}"
    else:
        text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –≠—Ç–æ –±—ã–ª <b>{correct}</b>.\n\nüí° {explanation}"

    await update.callback_query.answer()
    await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML)

    if context.user_data.get("in_train_mode"):
        await asyncio.sleep(1)
        await handle_train(update, context)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("quiz", handle_quiz))
    app.add_handler(CommandHandler("train", handle_train))
    app.add_handler(CallbackQueryHandler(handle_answer))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()

